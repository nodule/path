#!/usr/bin/env node
var fs = require('fs'),
  path = require('path'),
  request = require('request'),
  schema = require('chix-flow').Schema,
  Actor = require('chix-flow').Actor,
  extend = require('util')._extend,
  program = require('commander'),
  pkg = require('../package.json'),
  version = pkg.version,
  glob = require('glob'),
  jsonGate = require('json-gate'),
  nodeSchema = jsonGate.createSchema(schema.Node),
  mapSchema = jsonGate.createSchema(schema.Map);

var deployTo = "http://serve.chix.io";

var gpattern = "/nodes/*/*.js*";

program
  .version(version)
  .usage('[options]')
  .option('-g, --glob', 'globbing pattern default: ' + gpattern)
  .option('-r, --run-twigs', 'run the twigs, only use this for non-listening stuff')
  .option('-d, --deploy', 'deploy nodes')
  .option('-t, --deployTo [url]', 'server to deploy to')
  .option('-b, --base-dir [name]', 'base dir')
  .option('-v, --verbose', 'be verbose')
  .parse(process.argv);

// err, dirname is a bit weird gpattern should solve that.
var dirname = program.baseDir ? program.baseDir : process.cwd();
deployTo = (program.deployTo ? program.deployTo : deployTo) + "/nodes";
var deploy = program.deploy;

gpattern = program.glob || gpattern;

var c;

var pkg = require(path.resolve(dirname + '/package.json'));
var verbose = program.verbose;

if(verbose) console.log("Globbing" + dirname + gpattern);

var nodes = [];

glob(dirname + gpattern, function(err, files) {
  var parts, module, ext, i;
  var node = {};

  for(i = 0; i < files.length; i++) {

    parts = files[i].split('/');
    module = parts[1];
    ext = path.extname(files[i]);

    if(verbose) console.log("Reading file:", files[i]);
    c = fs.readFileSync(files[i]).toString();

    if(ext == ".js") {
      node.fn  = c; // warning: relies on .js before .json
    } else if(ext == ".json") {

      var json = JSON.parse(c);
      json.fn = node.fn; // crappy

      // also save env
      if(node.env) {
        json.env = node.env;
      } else if(pkg.chix.env) {
        json.env = pkg.chix.env;
      }

      // validate json
      nodeSchema.validate(json);
      if(verbose) console.log("validated:", files[i]);

      nodes.push(json);

      node = {};

    }

  }

  if(deploy) {

    // send to serve.chix.io
    request.put({
     url: deployTo,
     json: nodes
    }, function (err, res, body) {

      if(err) {
        console.log("Error:", err);
      } else {
        console.log("Deployed ", body);
      }

    });

  } else {

  // check twigs, todo: make the structure less hacky
  glob(dirname + "/twigs/*.json*", function(err, files) {
   var file;

    // nodes within this twig are allowed to incorparate other
    // namespaces, but this twig belongs to this namespace

   for(var i = 0; i < files.length; i++) {
      twig = require(files[i]);
      // validate it
      mapSchema.validate(twig);

      if(program.runTwigs) {
       // A bit of wild west, take caution with enabling runTwigs.
       // also note, that this will run (very) async.
       var actor = new Actor();
       actor.addMap(twig);
       actor.createNodes();
       actor.run();
     }
   }

  });
}

});
