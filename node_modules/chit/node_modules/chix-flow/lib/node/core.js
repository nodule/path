// create some core components always available
// I would like for instance a core component
// which has access to the actor itself.
// core/actor would have access to err, the core actor.
// and this would be the current actor.
// core/pm is the process manager etc.
// This would enable a powerful interaction interface.
// A UI could for example have the power to disable and enable links.
// This is important. because the main power is within that control.
// It's what utilizes the power of this kind of programming.
// e.g. imagine a part of the UI being disabled because a request is
// still loading. when the request finished, the link can be enabled.
// Something like that. The Hold part can accomplish this.
// Dropping is also something which is important an important part
// of programming this way. hold something and just drop any request to
// that particular node or subgraph, or queue the requests.
// I want these components to be ready because it allows me to create
// the monitoring interface also. For now just use handlebars to create
// that interface. It would be awesome if it is one on one with the blessing
// interface for the server side.
//
// so core can just bypass the loader with getNodeDefinition
// we already know those components, other core stuff could also be added that
// way. the most frequently used, like e.g. console.log
//
// the difference with actor is, a node does not have access normally to actor.
// I could also just use expose: actor for example.
// The problem in .fbp is, you cannot say:
// self -> actor Actor for example.
//
// I could expose self though and do getParent()
// Or in fact this within the code is self.
// So this.getParent() works maybe.
